from itertools import product

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from module_3.module_3_1 import calls

API_TOKEN = ''

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_calculate = KeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button_info = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button_buy = KeyboardButton('–ö—É–ø–∏—Ç—å')
keyboard.add(button_calculate, button_info, button_buy)

# –°–æ–∑–¥–∞–Ω–∏–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
inline_keyboard = InlineKeyboardMarkup()
button_calories = InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
button_formulas = InlineKeyboardButton('–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
inline_keyboard.add(button_calories, button_formulas)

inline_keyboard_buy = InlineKeyboardMarkup()
product1 = InlineKeyboardButton('Product1', callback_data='product_buying')
product2 = InlineKeyboardButton('Product2', callback_data='product_buying')
product3 = InlineKeyboardButton('Product3', callback_data='product_buying')
product4 = InlineKeyboardButton('Product4', callback_data='product_buying')
inline_keyboard_buy.add(product1, product2, product3, product4)

@dp.message_handler(lambda message: message.text == '–ö—É–ø–∏—Ç—å')
async def get_buying_list(message: types.Message):
    with open('../module_14/photo/–∫–∞–ª—å—Ü–∏–π.jpg', 'rb') as k_photo:
        await message.answer_photo(photo=k_photo, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: –ö–∞–ª—å—Ü–∏–π\n'
                                                          f'–û–ø–∏—Å–∞–Ω–∏–µ: –î–ª—è –∫–æ—Å—Ç–µ–πüëç\n'
                                                          f'–¶–µ–Ω–∞: 100 —Ä—É–±–ª–µ–π')

    with open('../module_14/photo/–∫–∞—Ä–Ω–µ—Ç–∏–Ω.png', 'rb') as l_photo:
        await message.answer_photo(photo=l_photo, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: –ö–∞—Ä–Ω–µ—Ç–∏–Ω\n'
                                                          f'–û–ø–∏—Å–∞–Ω–∏–µ: –î–ª—è —Å–ø–æ—Ä—Ç–∞üëç\n'
                                                          f'–¶–µ–Ω–∞: 200 —Ä—É–±–ª–µ–π')

    with open('../module_14/photo/–ö–æ–ª–∞–≥–µ–Ω.png', 'rb') as ko_photo:
        await message.answer_photo(photo=ko_photo, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: –ö–æ–ª–∞–≥–µ–Ω\n'
                                                           f'–û–ø–∏—Å–∞–Ω–∏–µ: –î–ª—è –∫–æ–∂–∏üëç\n'
                                                           f'–¶–µ–Ω–∞: 300 —Ä—É–±–ª–µ–π')

    with open('../module_14/photo/—Å.png', 'rb') as —Å_photo:
        await message.answer_photo(photo=—Å_photo, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: –í–∏—Ç–∞–º–∏–Ω –°\n'
                                                          f'–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ —Å—É—Ç–∏ –≤–∫—É—Å–Ω–æ, –∏ –ø–æ –≤–∫—É—Å—É –≤–∫—É—Å–Ω–æ!\n'
                                                          f'–¶–µ–Ω–∞: 400 —Ä—É–±–ª–µ–π')
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=inline_keyboard_buy)


@dp.callback_query_handler(lambda call: call.data == 'product_buying')
async def send_confirm_message(call: types.CallbackQuery):
    await call.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda call: call.data == 'formulas')
async def get_formulas(call: types.CallbackQuery):
    await call.message.answer(
        '–§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞:\n\n–î–ª—è –º—É–∂—á–∏–Ω:\n\nCalories = 10 * weight + 6.25 * height - 5 * age + 5\n\n–î–ª—è '
        '–∂–µ–Ω—â–∏–Ω:\n\nCalories = 10 * weight + 6.25 * height - 5 * age - 161')
    await call.answer()


@dp.callback_query_handler(lambda call: call.data == 'calories')
async def set_age(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()
    await call.answer()


@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)
    data = await state.get_data()

    age = int(data['age'])
    growth = int(data['growth'])
    weight = int(data['weight'])

    calories = 10 * weight + 6.25 * growth - 5 * age + 5

    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories:.2f} –∫–∫–∞–ª.')
    await state.finish()


@dp.message_handler()
async def all_messages(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
